package pt.ipb.tankshooter.ui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JPanel;

import pt.ipb.game.engine.Entity;
import pt.ipb.game.engine.Sprite;
import pt.ipb.game.engine.SpriteSheet;
import pt.ipb.tankshooter.ShotEntity;
import pt.ipb.tankshooter.TankEntity;

/**
 * The main hook of our game. This class with both act as a manager for the
 * display and central mediator for the game logic.
 * 
 * Display management will consist of a loop that cycles round all entities in
 * the game asking them to move and then drawing them in the appropriate place.
 * With the help of an inner class it will also allow the player to control the
 * main ship.
 * 
 * As a mediator it will be informed when entities within our game detect events
 * (e.g. alient killed, played died) and will take appropriate game actions.
 * 
 * @author Kevin Glass
 */
@SuppressWarnings("serial")
public class GamePanel extends JPanel implements Runnable {
	/** The speed at which the player's ship should move (pixels/sec) */
	private static final double SHOT_SPEED = 300;
	/** The speed at which the player's ship should move (pixels/sec) */
	private static final double MOVE_SPEED = 100;
	/** The speed at which the player's ship should move (pixels/sec) */
	private static final double ANGLE_SPEED = 0.1;

	/** True if the game is currently "running", i.e. the game loop is looping */
	private boolean gameRunning = true;
	/** The list of all the entities that exist in our game */
	private List<Entity> entities = new ArrayList<>();
	/** The list of entities that need to be removed from the game this loop */
	private List<Entity> removeList = new ArrayList<>();
	/** The entity representing the player */
	private TankEntity tank;
	/** The time at which last fired a shot */
	private long lastFire = 0;
	/** The interval between our players shot (ms) */
	private long firingInterval = 500;

	/** The message to display which waiting for a key press */
	private String message = "";
	/** True if we're holding up game play until a key has been pressed */
	private boolean waitingForKeyPress = true;
	/** True if the left cursor key is currently pressed */
	private boolean leftPressed = false;
	/** True if the right cursor key is currently pressed */
	private boolean rightPressed = false;
	/** True if the forward cursor key is currently pressed */
	private boolean fwPressed = false;
	/** True if we are firing */
	private boolean firePressed = false;
	/**
	 * True if game logic needs to be applied this loop, normally as a result of
	 * a game event
	 */
	private boolean logicRequiredThisLoop = false;
	
    Image background;

    int width;
    int height;

	/**
	 * Construct our game and set it running.
	 */
	public GamePanel(int width, int height, Image background) {

		this.background = background;

		// setup our canvas size and put it into the content of the frame
		setBounds(0, 0, width, height);

		// Tell AWT not to bother repainting our canvas since we're
		// going to do that our self in accelerated mode
		setIgnoreRepaint(true);

		// add a key input system (defined below) to our canvas
		// so we can respond to key pressed
		addKeyListener(new KeyInputHandler());

		// request the focus so key events come to us
		requestFocus();

		// initialise the entities in our game so there's something
		// to see at startup
		initEntities();
	}

	/**
	 * Start a fresh game, this should clear out any old data and create a new
	 * set.
	 */
	private void startGame() {
		// clear out any existing entities and intialise a new set
		entities.clear();
		initEntities();

		// blank out any keyboard settings we might currently have
		leftPressed = false;
		rightPressed = false;
		firePressed = false;
		fwPressed = false;
	}

	/**
	 * Initialise the starting state of the entities (ship and aliens). Each
	 * entitiy will be added to the overall list of entities in the game.
	 */
	private void initEntities() {
		// create the player ship and place it roughly in the center of the
		// screen
		SpriteSheet spriteSheet = new SpriteSheet("pt/ipb/deztruicao/resources/MulticolorTanks.png", 32, 5);
		Sprite[] tankSprites = new Sprite[8];
		for (int i = 0; i < 8; i++) {
			tankSprites[i] = spriteSheet.getSprite(i, 0);
		}

		tank = new TankEntity(this, tankSprites, 370, 550);
		entities.add(tank);
	}

	/**
	 * Notification from a game entity that the logic of the game should be run
	 * at the next opportunity (normally as a result of some game event)
	 */
	public void updateLogic() {
		logicRequiredThisLoop = true;
	}

	/**
	 * Remove an entity from the game. The entity removed will no longer move or
	 * be drawn.
	 * 
	 * @param entity
	 *            The entity that should be removed
	 */
	public void removeEntity(Entity entity) {
		removeList.add(entity);
	}

	/**
	 * Notification that the player has died.
	 */
	public void notifyDeath() {
		message = "Oh no! They got you, try again?";
		waitingForKeyPress = true;
	}

	/**
	 * Notification that the player has won since all the aliens are dead.
	 */
	public void notifyWin() {
		message = "Well done! You Win!";
		waitingForKeyPress = true;
	}

	public void notifyTankKilled() {
		System.out.println("Tank killed");

		// if (alienCount == 0) {
		// notifyWin();
		// }

	}

	/**
	 * Attempt to fire a shot from the player. Its called "try" since we must
	 * first check that the player can fire at this point, i.e. has he/she
	 * waited long enough between shots
	 */
	public void tryToFire() {
		// check that we have waiting long enough to fire
		if (System.currentTimeMillis() - lastFire < firingInterval) {
			return;
		}

		// if we waited long enough, create the shot entity, and record the
		// time.
		lastFire = System.currentTimeMillis();
		SpriteSheet shotSheet = new SpriteSheet("pt/ipb/deztruicao/resources/shot.gif", 23, 12, 2);
		Sprite[] shotSprites = new Sprite[] { shotSheet.getSprite(0, 0) };
		double h = Math.sqrt( (tank.getWidth()/2)*(tank.getWidth()/2)+(tank.getHeight()/2)*(tank.getHeight()/2));
		double dx = Math.cos(tank.getAngle()) * h;
		double dy = Math.sin(tank.getAngle()) * h;
		int x = (int) (tank.getX()+tank.getWidth()/2 + 2*dx - 12);
		int y = (int) (tank.getY()+tank.getHeight()/2 + 2*dy - 6);

		ShotEntity shot = new ShotEntity(this, shotSprites, x, y);
		shot.setAngle(tank.getAngle());
		shot.setSpeed(SHOT_SPEED);
		entities.add(shot);
	}

	/**
	 * The main game loop. This loop is running during all game play as is
	 * responsible for the following activities:
	 * <p>
	 * - Working out the speed of the game loop to update moves - Moving the
	 * game entities - Drawing the screen contents (entities, text) - Updating
	 * game events - Checking Input
	 * <p>
	 */
	public void gameLoop() {
		long lastLoopTime = System.currentTimeMillis();

		// keep looping round til the game ends
		while (gameRunning) {
			// work out how long its been since the last update, this
			// will be used to calculate how far the entities should
			// move this loop
			long delta = System.currentTimeMillis() - lastLoopTime;
			lastLoopTime = System.currentTimeMillis();

			repaint();

			// cycle round asking each entity to move itself
			if (!waitingForKeyPress) {
				for (int i = 0; i < entities.size(); i++) {
					Entity entity = (Entity) entities.get(i);

					entity.move(delta);
				}
			}

			// brute force collisions, compare every entity against
			// every other entity. If any of them collide notify
			// both entities that the collision has occured
			for (int p = 0; p < entities.size(); p++) {
				for (int s = p + 1; s < entities.size(); s++) {
					Entity me = (Entity) entities.get(p);
					Entity him = (Entity) entities.get(s);

					if (me.collidesWith(him)) {
						me.collidedWith(him);
						him.collidedWith(me);
					}
				}
			}

			// remove any entity that has been marked for clear up
			entities.removeAll(removeList);
			removeList.clear();

			// if a game event has indicated that game logic should
			// be resolved, cycle round every entity requesting that
			// their personal logic should be considered.
			if (logicRequiredThisLoop) {
				for (int i = 0; i < entities.size(); i++) {
					Entity entity = (Entity) entities.get(i);
					entity.doLogic();
				}

				logicRequiredThisLoop = false;
			}

			// resolve the movement of the ship. First assume the ship
			// isn't moving. If either cursor key is pressed then
			// update the movement appropraitely
			// tank.setHorizontalMovement(0);

			if ((leftPressed) && (!rightPressed)) {
				tank.rotate(-ANGLE_SPEED);
			} else if ((rightPressed) && (!leftPressed)) {
				tank.rotate(ANGLE_SPEED);
			} else if (fwPressed) {
				tank.setSpeed(MOVE_SPEED);
			} else if (!fwPressed) {
				tank.setSpeed(0);
			}

			// if we're pressing fire, attempt to fire
			if (firePressed) {
				tryToFire();
			}

			// finally pause for a bit. Note: this should run us at about
			// 100 fps but on windows this might vary each loop due to
			// a bad implementation of timer
			try {
				Thread.sleep(10);
			} catch (Exception e) {
			}
		}
	}

	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);

		// Get hold of a graphics context for the accelerated
		// surface and blank it out
		Graphics2D g2 = (Graphics2D) g;
		g2.drawImage(background, 0, 0, null);

		// cycle round drawing all the entities we have in the game
		for (int i = 0; i < entities.size(); i++) {
			Entity entity = (Entity) entities.get(i);

			entity.draw(g);
		}

		// if we're waiting for an "any key" press then draw the
		// current message
		if (waitingForKeyPress) {
			g.setColor(Color.white);
			g.drawString(message, (800 - g.getFontMetrics().stringWidth(message)) / 2, 250);
			g.drawString("Press any key", (800 - g.getFontMetrics().stringWidth("Press any key")) / 2, 300);
		}

	}

	/**
	 * A class to handle keyboard input from the user. The class handles both
	 * dynamic input during game play, i.e. left/right and shoot, and more
	 * static type input (i.e. press any key to continue)
	 * 
	 * This has been implemented as an inner class more through habbit then
	 * anything else. Its perfectly normal to implement this as seperate class
	 * if slight less convienient.
	 * 
	 * @author Kevin Glass
	 */
	private class KeyInputHandler extends KeyAdapter {
		/**
		 * The number of key presses we've had while waiting for an "any key"
		 * press
		 */
		private int pressCount = 1;

		/**
		 * Notification from AWT that a key has been pressed. Note that a key
		 * being pressed is equal to being pushed down but *NOT* released. Thats
		 * where keyTyped() comes in.
		 *
		 * @param e
		 *            The details of the key that was pressed
		 */
		public void keyPressed(KeyEvent e) {
			// if we're waiting for an "any key" typed then we don't
			// want to do anything with just a "press"
			if (waitingForKeyPress) {
				return;
			}

			if (e.getKeyCode() == KeyEvent.VK_LEFT) {
				leftPressed = true;
			}
			if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
				rightPressed = true;
			}
			if (e.getKeyCode() == KeyEvent.VK_UP) {
				fwPressed = true;
			}
			if (e.getKeyCode() == KeyEvent.VK_SPACE) {
				firePressed = true;
			}
		}

		/**
		 * Notification from AWT that a key has been released.
		 *
		 * @param e
		 *            The details of the key that was released
		 */
		public void keyReleased(KeyEvent e) {
			// if we're waiting for an "any key" typed then we don't
			// want to do anything with just a "released"
			if (waitingForKeyPress) {
				return;
			}

			if (e.getKeyCode() == KeyEvent.VK_LEFT) {
				leftPressed = false;
			}
			if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
				rightPressed = false;
			}
			if (e.getKeyCode() == KeyEvent.VK_UP) {
				fwPressed = false;
			}
			if (e.getKeyCode() == KeyEvent.VK_SPACE) {
				firePressed = false;
			}
		}

		/**
		 * Notification from AWT that a key has been typed. Note that typing a
		 * key means to both press and then release it.
		 *
		 * @param e
		 *            The details of the key that was typed.
		 */
		public void keyTyped(KeyEvent e) {
			// if we're waiting for a "any key" type then
			// check if we've recieved any recently. We may
			// have had a keyType() event from the user releasing
			// the shoot or move keys, hence the use of the "pressCount"
			// counter.
			if (waitingForKeyPress) {
				if (pressCount == 1) {
					// since we've now recieved our key typed
					// event we can mark it as such and start
					// our new game
					waitingForKeyPress = false;
					startGame();
					pressCount = 0;
				} else {
					pressCount++;
				}
			}

			// if we hit escape, then quit the game
			if (e.getKeyChar() == 27) {
				System.exit(0);
			}
		}
	}

	@Override
	public void run() {
		gameLoop();
	}
}
